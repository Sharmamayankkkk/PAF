/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { PetCategory } from "./PetCategory";
import { PetCategoryCountArgs } from "./PetCategoryCountArgs";
import { PetCategoryFindManyArgs } from "./PetCategoryFindManyArgs";
import { PetCategoryFindUniqueArgs } from "./PetCategoryFindUniqueArgs";
import { CreatePetCategoryArgs } from "./CreatePetCategoryArgs";
import { UpdatePetCategoryArgs } from "./UpdatePetCategoryArgs";
import { DeletePetCategoryArgs } from "./DeletePetCategoryArgs";
import { PetFindManyArgs } from "../../pet/base/PetFindManyArgs";
import { Pet } from "../../pet/base/Pet";
import { PetCategoryService } from "../petCategory.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => PetCategory)
export class PetCategoryResolverBase {
  constructor(
    protected readonly service: PetCategoryService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "PetCategory",
    action: "read",
    possession: "any",
  })
  async _petCategoriesMeta(
    @graphql.Args() args: PetCategoryCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [PetCategory])
  @nestAccessControl.UseRoles({
    resource: "PetCategory",
    action: "read",
    possession: "any",
  })
  async petCategories(
    @graphql.Args() args: PetCategoryFindManyArgs
  ): Promise<PetCategory[]> {
    return this.service.petCategories(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => PetCategory, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "PetCategory",
    action: "read",
    possession: "own",
  })
  async petCategory(
    @graphql.Args() args: PetCategoryFindUniqueArgs
  ): Promise<PetCategory | null> {
    const result = await this.service.petCategory(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => PetCategory)
  @nestAccessControl.UseRoles({
    resource: "PetCategory",
    action: "create",
    possession: "any",
  })
  async createPetCategory(
    @graphql.Args() args: CreatePetCategoryArgs
  ): Promise<PetCategory> {
    return await this.service.createPetCategory({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => PetCategory)
  @nestAccessControl.UseRoles({
    resource: "PetCategory",
    action: "update",
    possession: "any",
  })
  async updatePetCategory(
    @graphql.Args() args: UpdatePetCategoryArgs
  ): Promise<PetCategory | null> {
    try {
      return await this.service.updatePetCategory({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PetCategory)
  @nestAccessControl.UseRoles({
    resource: "PetCategory",
    action: "delete",
    possession: "any",
  })
  async deletePetCategory(
    @graphql.Args() args: DeletePetCategoryArgs
  ): Promise<PetCategory | null> {
    try {
      return await this.service.deletePetCategory(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Pet], { name: "pets" })
  @nestAccessControl.UseRoles({
    resource: "Pet",
    action: "read",
    possession: "any",
  })
  async findPets(
    @graphql.Parent() parent: PetCategory,
    @graphql.Args() args: PetFindManyArgs
  ): Promise<Pet[]> {
    const results = await this.service.findPets(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
