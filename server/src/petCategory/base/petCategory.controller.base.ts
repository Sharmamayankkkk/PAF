/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { PetCategoryService } from "../petCategory.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { PetCategoryCreateInput } from "./PetCategoryCreateInput";
import { PetCategory } from "./PetCategory";
import { PetCategoryFindManyArgs } from "./PetCategoryFindManyArgs";
import { PetCategoryWhereUniqueInput } from "./PetCategoryWhereUniqueInput";
import { PetCategoryUpdateInput } from "./PetCategoryUpdateInput";
import { PetFindManyArgs } from "../../pet/base/PetFindManyArgs";
import { Pet } from "../../pet/base/Pet";
import { PetWhereUniqueInput } from "../../pet/base/PetWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class PetCategoryControllerBase {
  constructor(
    protected readonly service: PetCategoryService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: PetCategory })
  @nestAccessControl.UseRoles({
    resource: "PetCategory",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createPetCategory(
    @common.Body() data: PetCategoryCreateInput
  ): Promise<PetCategory> {
    return await this.service.createPetCategory({
      data: data,
      select: {
        createdAt: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [PetCategory] })
  @ApiNestedQuery(PetCategoryFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "PetCategory",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async petCategories(@common.Req() request: Request): Promise<PetCategory[]> {
    const args = plainToClass(PetCategoryFindManyArgs, request.query);
    return this.service.petCategories({
      ...args,
      select: {
        createdAt: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: PetCategory })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "PetCategory",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async petCategory(
    @common.Param() params: PetCategoryWhereUniqueInput
  ): Promise<PetCategory | null> {
    const result = await this.service.petCategory({
      where: params,
      select: {
        createdAt: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: PetCategory })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "PetCategory",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updatePetCategory(
    @common.Param() params: PetCategoryWhereUniqueInput,
    @common.Body() data: PetCategoryUpdateInput
  ): Promise<PetCategory | null> {
    try {
      return await this.service.updatePetCategory({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: PetCategory })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "PetCategory",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deletePetCategory(
    @common.Param() params: PetCategoryWhereUniqueInput
  ): Promise<PetCategory | null> {
    try {
      return await this.service.deletePetCategory({
        where: params,
        select: {
          createdAt: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/pets")
  @ApiNestedQuery(PetFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Pet",
    action: "read",
    possession: "any",
  })
  async findPets(
    @common.Req() request: Request,
    @common.Param() params: PetCategoryWhereUniqueInput
  ): Promise<Pet[]> {
    const query = plainToClass(PetFindManyArgs, request.query);
    const results = await this.service.findPets(params.id, {
      ...query,
      select: {
        colors: true,
        createdAt: true,
        description: true,
        discountedPrice: true,
        id: true,
        images: true,

        order: {
          select: {
            id: true,
          },
        },

        petCategory: {
          select: {
            id: true,
          },
        },

        review: {
          select: {
            id: true,
          },
        },

        title: true,
        titlePrice: true,
        updatedAt: true,
        variants: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/pets")
  @nestAccessControl.UseRoles({
    resource: "PetCategory",
    action: "update",
    possession: "any",
  })
  async connectPets(
    @common.Param() params: PetCategoryWhereUniqueInput,
    @common.Body() body: PetWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      pets: {
        connect: body,
      },
    };
    await this.service.updatePetCategory({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/pets")
  @nestAccessControl.UseRoles({
    resource: "PetCategory",
    action: "update",
    possession: "any",
  })
  async updatePets(
    @common.Param() params: PetCategoryWhereUniqueInput,
    @common.Body() body: PetWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      pets: {
        set: body,
      },
    };
    await this.service.updatePetCategory({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/pets")
  @nestAccessControl.UseRoles({
    resource: "PetCategory",
    action: "update",
    possession: "any",
  })
  async disconnectPets(
    @common.Param() params: PetCategoryWhereUniqueInput,
    @common.Body() body: PetWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      pets: {
        disconnect: body,
      },
    };
    await this.service.updatePetCategory({
      where: params,
      data,
      select: { id: true },
    });
  }
}
