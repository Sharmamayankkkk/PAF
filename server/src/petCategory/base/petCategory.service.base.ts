/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  PetCategory as PrismaPetCategory,
  Pet as PrismaPet,
} from "@prisma/client";

export class PetCategoryServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.PetCategoryCountArgs, "select">
  ): Promise<number> {
    return this.prisma.petCategory.count(args);
  }

  async petCategories(
    args: Prisma.PetCategoryFindManyArgs
  ): Promise<PrismaPetCategory[]> {
    return this.prisma.petCategory.findMany(args);
  }
  async petCategory(
    args: Prisma.PetCategoryFindUniqueArgs
  ): Promise<PrismaPetCategory | null> {
    return this.prisma.petCategory.findUnique(args);
  }
  async createPetCategory(
    args: Prisma.PetCategoryCreateArgs
  ): Promise<PrismaPetCategory> {
    return this.prisma.petCategory.create(args);
  }
  async updatePetCategory(
    args: Prisma.PetCategoryUpdateArgs
  ): Promise<PrismaPetCategory> {
    return this.prisma.petCategory.update(args);
  }
  async deletePetCategory(
    args: Prisma.PetCategoryDeleteArgs
  ): Promise<PrismaPetCategory> {
    return this.prisma.petCategory.delete(args);
  }

  async findPets(
    parentId: string,
    args: Prisma.PetFindManyArgs
  ): Promise<PrismaPet[]> {
    return this.prisma.petCategory
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .pets(args);
  }
}
